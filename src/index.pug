---
layout: layouts/home.pug
---

<a style="display:none;" rel="me" href="https://mastodon.social/@cwervo">Mastodon</a>

div#container(style="position: fixed; top: 0; left: 0; height: 100%; width: 100%; z-index: -1;")

style.
    #hello {
        font-size: 2rem;
    }

    @media (min-width: 600px) { #hello { font-size: 4rem; } }
    @media (min-width: 1000px) { #hello { font-size: 5rem; } }

div#hello
   | üëãüèº I'm Andr√©s Cuervo. I work in augmented reality, computational art, &amp; human computer interaction. I like games, short form science fiction, speculative design, watercolor painting, and a million other things.

script(src="/assets/js/three-r107.min.js")

script.
    console.log("üëãüèº");
    var container;
    var camera, scene, renderer;
    var uniforms, material, mesh;
    var mouseX = 0, mouseY = 0,
    lat = 0, lon = 0, phy = 0, theta = 0;
    var windowHalfX = window.innerWidth / 2;
    var windowHalfY = window.innerHeight / 2;
    init();
    var startTime = Date.now();
    animate();
    function init() {
        container = document.getElementById( 'container' );
        camera = new THREE.Camera();
        camera.position.z = 1;
        scene = new THREE.Scene();
        uniforms = {
            u_time: { type: "f", value: 1.0 },
            u_resolution: { type: "v2", value: new THREE.Vector2() },
            u_mouse: { type: "v2", value: new THREE.Vector2() }
        };
        material = new THREE.ShaderMaterial( {
            uniforms: uniforms,
            vertexShader: `
                uniform float u_time;
                uniform vec2 u_resolution;
                uniform vec2 u_mouse;
                void main()	{
                    gl_Position = vec4( position, 1.0 );
                }
            `,
            fragmentShader: `
                uniform float u_time;
                uniform vec2 u_resolution;
                uniform vec2 u_mouse;

                void main()	{
                    vec2 uv = gl_FragCoord.xy / u_resolution.xy;
                    // Shift downward a bit
                    uv.y += 0.3;
                    // Normalize & flip across y-axis
                    uv += u_mouse/u_resolution * vec2(-1.0, 1.0);
                    vec3 col = 0.5 + 0.5*tan(0.5*u_time+uv.xyx+vec3(0,2,4));
                    col = 0.5 + 0.5*cos(u_time*0.1+uv.xyx+vec3(0,2,4));
                    gl_FragColor = vec4(col * (0.4 + uv.y), 1.0);
                }`
        });
        mesh = new THREE.Mesh( new THREE.PlaneGeometry( 2, 2 ), material );
        scene.add( mesh );
        renderer = new THREE.WebGLRenderer();
        container.appendChild( renderer.domElement );
        setContainerSize();
    }
    function animate() {
        requestAnimationFrame( animate );
        render();
    }
    function render() {
        var elapsedMilliseconds = Date.now() - startTime;
        uniforms.u_time.value = elapsedMilliseconds / 1000;
        renderer.render( scene, camera );
    }

    document.onmousemove = function(e){
        uniforms.u_mouse.value.x = e.pageX
        uniforms.u_mouse.value.y = e.pageY
    }

    function setContainerSize() {
        uniforms.u_resolution.value.x = window.innerWidth;
        uniforms.u_resolution.value.y = window.innerHeight;
        renderer.setSize( window.innerWidth, window.innerHeight );
    }

    window.addEventListener( 'resize', onWindowResize, false );

    let hello = document.querySelector('#hello');
    function handleOrientation(event) {
        let {absolute, alpha, beta, gamma} = event;
        // hello.innerText = `
        //     abs: ${absolute}\n
        //     alpha: ${alpha}\n
        //     beta: ${beta}\n
        //     gamma: ${gamma}
        // `
        // Smoother transitions w/ sin:
        uniforms.u_mouse.value.x = uniforms.u_resolution.value.x * Math.sin(alpha * 0.025); // 0.00277 ‚âÖ 1 / 360
        uniforms.u_mouse.value.y = uniforms.u_resolution.value.y * Math.sin(beta * 0.025); // 0.00277 ‚âÖ 1 / 360
    }

    window.addEventListener("deviceorientation", handleOrientation, true);

    function onWindowResize(){
        camera.aspect = window.innerWidth / window.innerHeight;
        setContainerSize();
    }
